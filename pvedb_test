#!/usr/bin/perl -w

use strict;
use lib qw(.);
use PVE::Database;
use File::Path;
use IO::File;
use Data::Dumper;

use PVE::SafeSyslog;
use PVE::Cluster;
use PVE::INotify;
use PVE::RPCEnvironment;

use PVE::JSONSchema qw(get_standard_option);

use PVE::CLIHandler;

use base qw(PVE::CLIHandler);

$ENV{'PATH'} = '/sbin:/bin:/usr/sbin:/usr/bin';

initlog ('pvedb');

die "please run as root\n" if $> != 0;

PVE::INotify::inotify_init();

my $rpcenv = PVE::RPCEnvironment->init('cli');

$rpcenv->init_request();
$rpcenv->set_language($ENV{LANG});
$rpcenv->set_user('root@pam');

__PACKAGE__->register_method ({
    name => 'get',
    path => 'get',
    method => 'GET',
    description => "get database sections and values.",
    parameters => {
    	additionalProperties => 0,
	properties => {
		node => get_standard_option('pve-node'),
		vmid => get_standard_option('pve-vmid'),
		
	},
	#section => {
	#	type => 'string',
	#	description => "A section you want to query.",
	#	optional => 1,
	#},		
    },
    returns => { type => 'object',
				properties => {
					digest => {
						type => 'string',
						description => 'SHA1 digest of database file. This can be used to prevent concurrent modifications.',
					}
				}
			   },

    code => sub {
		my ($param) = @_;

		my $dbconf = PVE::Database::load_vmdb_conf($param->{vmid});
		my ($conf, undef) = PVE::Database::copy_object_with_digest($dbconf);
		return $conf;
    }});
	
#__PACKAGE__->register_method ({
#    name => 'set',
#    path => 'set',
#    method => 'POST',
#    description => "set database rules",
#    parameters => {
#    	additionalProperties => 0,
#	properties => {
#		node => get_standard_option('pve-node'),
#		vmid => get_standard_option('pve-vmid'),
#		digest => get_standard_option('pve-config-digest'),
#		delete => {
#		    type => 'string', format => 'pve-configid-list',
#		    description => "A list of settings you want to delete.",
#		    optional => 1,
#		},
#		delsection => {
#		    type => 'string',
#		    description => "A section where you want to delete values.",
#		    optional => 1,
#		},		
#	},
#   },
#    returns => { type => 'null' },
#
#    code => sub {
#	my ($param) = @_;
#
#	my $dbconf = PVE::Database::compile($param->{vmid});
#	my (undef, $digest) = PVE::Database::copy_object_with_digest($dbconf);
#	PVE::Tools::assert_if_modified($digest, $param->{digest});
#	if ($param->{delete} && $param->{delsection}) {
#		my @delete = PVE::Tools::split_list($param->{delete});
#		PVE::Database::remove_from_object($dbconf, $param->{delsection}, @delete);
#	 }
#	
#	PVE::Database::save_vmdb_conf($param->{vmid}, $dbconf);
#	return undef;
#
#    }});

my $nodename = PVE::INotify::nodename();

my $cmddef = {
    get => [ __PACKAGE__, 'get', []],
#	set => [ __PACKAGE__, 'set', []],
};

my $cmd = shift;

PVE::CLIHandler::handle_cmd($cmddef, "pvedb", $cmd, \@ARGV, undef, $0);

exit(0);

