#!/usr/bin/perl

use strict;
use warnings;
use PVE::SafeSyslog;
use PVE::Daemon;

use Time::HiRes qw (gettimeofday);
use PVE::Tools qw(dir_glob_foreach file_read_firstline);
use PVE::ProcFSTools;
use Filesys::Df;
use PVE::INotify;
use PVE::Cluster qw(cfs_read_file);
use PVE::Storage;
use PVE::QemuServer;
use PVE::OpenVZ;
use PVE::RPCEnvironment;
use PVE::API2::Subscription;
use PVE::AutoBalloon;
use PVE::Database;
use Data::Dumper;

use base qw(PVE::Daemon);

my $opt_debug;

my $cmdline = [$0, @ARGV];

my %daemon_options = (restart_on_error => 5, stop_wait_time => 5);

my $daemon = __PACKAGE__->new('pvedatabased', $cmdline, %daemon_options);

my $rpcenv = PVE::RPCEnvironment->init('cli');

$rpcenv->init_request();
$rpcenv->set_language($ENV{LANG});
$rpcenv->set_user('root@pam');

my $nodename = PVE::INotify::nodename();
my $restart_request = 0;

sub init {
    my ($self) = @_;

    PVE::Cluster::cfs_update();
}

sub shutdown {
    my ($self) = @_;

    syslog('info' , "server closing");

    # wait for children
    1 while (waitpid(-1, POSIX::WNOHANG()) > 0);

    $self->exit_daemon(0);
}

sub hup {
    my ($self) = @_;

    syslog('info' , "received signal HUP");

    $restart_request = 1;
}

my $database = PVE::Database::new();

sub update_qemu_status {
    my $vmstatus = PVE::QemuServer::vmstatus(undef, 1);

    foreach my $vmid (keys %$vmstatus) {
		my $d = $vmstatus->{$vmid};
		next if $d->{status} ne 'running';

		my $vmconf = PVE::QemuServer::load_config($vmid);
		my $vmdbconf = PVE::Database::load_vmdb_conf($vmid);
		
		$database->update_vm_network($d, $vmid, $vmdbconf);
		
		my $rate = $vmdbconf->{network}->{rate};
		$rate = $vmdbconf->{network}->{exceededrate} if($vmdbconf->{network}->{netlock} eq 1 && $vmdbconf->{network}->{exceededrate});
		
		foreach my $key (keys %$vmconf) {
			next if $key !~ m/^^net(\d+)$/i;
				
			my $tapinterface = "tap${vmid}i${1}";

			PVE::Database::Tc_SetQemuRules($rate, $tapinterface);
		}
	}
}

sub update_openvz_status {
    my $vmstatus = PVE::OpenVZ::vmstatus();
	
	my $hostdbconf = PVE::Database::load_hostdb_conf();
	my $classcounter = 1;
	
	PVE::Database::Tc_SetHostRules($hostdbconf->{network}->{limitinterface});

    foreach my $vmid (keys %$vmstatus) {
		my $d = $vmstatus->{$vmid};
		my $veconf = PVE::OpenVZ::load_config($vmid);
		my $vmdbconf = PVE::Database::load_vmdb_conf($vmid);
		
		$database->update_vm_network($d, $vmid, $vmdbconf);
		
		my $rate = $vmdbconf->{network}->{rate};
		$rate = $vmdbconf->{network}->{exceededrate} if($vmdbconf->{network}->{netlock} eq 1 && $vmdbconf->{network}->{exceededrate});
		
		if($rate gt 0) {
			if (my $ip = $veconf->{ip_address}->{value}) {
				$ip =~ s/,;/ /g;
				my @ips = (split(/\s+/, $ip));
				PVE::Database::Tc_SetContainerRules($rate, $hostdbconf->{network}->{limitinterface}, $classcounter, @ips);
			}
			$classcounter ++;
		}
	}

}

sub update_status {

    # update worker list. This is not really required and
    # we just call this to make sure that we have a correct
    # list in case of an unexpected crash.
    my $err;

    eval {
		update_qemu_status();
    };
    $err = $@;
    syslog('err', "qemu status update error: $err") if $err;

    eval {
		update_openvz_status();
    };
    $err = $@;
    syslog('err', "openvz status update error: $err") if $err;
}

my $next_update = 0;

# do not update directly after startup, because install scripts
# have a problem with that
my $cycle = 0; 
my $updatetime = 300;

my $initial_memory_usage;

sub run {
    my ($self) = @_;

    for (;;) { # forever

 	$next_update = time() + $updatetime;

	if ($cycle) {
	    my ($ccsec, $cusec) = gettimeofday ();
	    eval {
		# syslog('info', "start status update");
		PVE::Cluster::cfs_update();
		update_status();
	    };
	    my $err = $@;

	    if ($err) {
		syslog('err', "status update error: $err");
	    }

	    my ($ccsec_end, $cusec_end) = gettimeofday ();
	    my $cptime = ($ccsec_end-$ccsec) + ($cusec_end - $cusec)/1000000;

	    syslog('info', sprintf("status update time (%.3f seconds)", $cptime))
		if ($cptime > 5);
	}

	$cycle++;

	my $mem = PVE::ProcFSTools::read_memory_usage();

	if (!defined($initial_memory_usage) || ($cycle < 10)) {
	    $initial_memory_usage = $mem->{resident};
	} else {
	    my $diff = $mem->{resident} - $initial_memory_usage;
	    if ($diff > 5*1024*1024) {
		syslog ('info', "restarting server after $cycle cycles to " .
			"reduce memory usage (free $mem->{resident} ($diff) bytes)");
		$self->restart_daemon();
	    }
	}

	my $wcount = 0;
	while ((time() < $next_update) && 
	       ($wcount < $updatetime) && # protect against time wrap
	       !$restart_request) { $wcount++; sleep (1); };

	$self->restart_daemon() if $restart_request;
    }
}

$daemon->register_start_command(__PACKAGE__);
$daemon->register_restart_command(__PACKAGE__, 1);
$daemon->register_stop_command(__PACKAGE__);
$daemon->register_status_command(__PACKAGE__);

my $cmddef = {
    start => [ __PACKAGE__, 'start', []],
    restart => [ __PACKAGE__, 'restart', []],
    stop => [ __PACKAGE__, 'stop', []],
    status => [ __PACKAGE__, 'status', [], undef, sub { print shift . "\n";} ],
};

my $cmd = shift;

PVE::CLIHandler::handle_cmd($cmddef, $0, $cmd, \@ARGV, undef, $0);

exit (0);

__END__

=head1 NAME
                                          
pvedatabased - PVE Database Daemon

=head1 SYNOPSIS

pvedatabased

=head1 DESCRIPTION

Documentation is available at www.proxmox.com
